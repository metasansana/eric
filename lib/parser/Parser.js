"use strict";

/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = function () {
    var o = function o(k, v, _o, l) {
        for (_o = _o || {}, l = k.length; l--; _o[k[l]] = v) {}return _o;
    },
        $V0 = [6, 8, 17],
        $V1 = [6, 17],
        $V2 = [1, 12],
        $V3 = [1, 18],
        $V4 = [21, 66],
        $V5 = [1, 31],
        $V6 = [1, 55],
        $V7 = [1, 38],
        $V8 = [1, 39],
        $V9 = [1, 56],
        $Va = [1, 57],
        $Vb = [1, 58],
        $Vc = [1, 54],
        $Vd = [1, 62],
        $Ve = [18, 21, 29, 30, 36, 54, 66],
        $Vf = [1, 65],
        $Vg = [1, 66],
        $Vh = [1, 67],
        $Vi = [1, 68],
        $Vj = [1, 69],
        $Vk = [1, 70],
        $Vl = [1, 71],
        $Vm = [1, 72],
        $Vn = [1, 73],
        $Vo = [1, 74],
        $Vp = [18, 21, 29, 30, 36, 54, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76],
        $Vq = [1, 79],
        $Vr = [1, 91],
        $Vs = [1, 95],
        $Vt = [29, 30, 54],
        $Vu = [19, 27, 53, 55, 56, 57, 60, 66],
        $Vv = [21, 30],
        $Vw = [18, 21, 27, 29, 30, 36, 54, 59, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76];
    var parser = { trace: function trace() {},
        yy: {},
        symbols_: { "error": 2, "task_file": 3, "task_file_repetition0": 4, "task_file_repetition1": 5, "EOF": 6, "import_statement": 7, "IMPORT": 8, "import_member": 9, "FROM": 10, "string_literal": 11, ";": 12, "identifier": 13, "*": 14, "AS": 15, "task_statement": 16, "TASK": 17, ":": 18, "{": 19, "task_body": 20, "}": 21, "property_assignment": 22, "function_expression": 23, "properties": 24, "expression": 25, "calls": 26, "(": 27, "arguments": 28, ")": 29, ",": 30, "grouped_expression": 31, "ternary_expression": 32, "binary_expression": 33, "unary_expression": 34, "value_expression": 35, "?": 36, "binary_operator": 37, "binary_operator_group0": 38, "!": 39, "variable_expression": 40, "literal_expression": 41, "property_expression": 42, "method_expression": 43, "bind_expression": 44, "new_expression": 45, "object_literal": 46, "array_literal": 47, "number_literal": 48, "boolean_literal": 49, "key_value_pairs": 50, "key_value_pair": 51, "key_value_pair_group0": 52, "[": 53, "]": 54, "STRING_LITERAL": 55, "NUMBER_LITERAL": 56, "BOOLEAN": 57, "member_access": 58, "::": 59, "NEW": 60, "new_expression_group0": 61, "function_literal": 62, "parameters": 63, "=>": 64, ".": 65, "IDENTIFIER": 66, ">": 67, ">=": 68, "<": 69, "<=": 70, "==": 71, "!=": 72, "+": 73, "/": 74, "-": 75, "=": 76, "indentifier": 77, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 6: "EOF", 8: "IMPORT", 10: "FROM", 12: ";", 14: "*", 15: "AS", 17: "TASK", 18: ":", 19: "{", 21: "}", 27: "(", 29: ")", 30: ",", 36: "?", 39: "!", 53: "[", 54: "]", 55: "STRING_LITERAL", 56: "NUMBER_LITERAL", 57: "BOOLEAN", 59: "::", 60: "NEW", 64: "=>", 65: ".", 66: "IDENTIFIER", 67: ">", 68: ">=", 69: "<", 70: "<=", 71: "==", 72: "!=", 73: "+", 74: "/", 75: "-", 76: "=", 77: "indentifier" },
        productions_: [0, [3, 3], [7, 5], [9, 1], [9, 3], [16, 7], [20, 1], [20, 1], [20, 2], [20, 2], [24, 1], [24, 2], [22, 3], [26, 1], [26, 2], [23, 4], [23, 3], [28, 1], [28, 3], [25, 1], [25, 1], [25, 1], [25, 1], [25, 1], [31, 3], [32, 5], [33, 3], [33, 3], [37, 1], [34, 2], [35, 1], [35, 1], [35, 1], [35, 1], [35, 1], [35, 1], [35, 1], [40, 1], [41, 1], [41, 1], [41, 1], [41, 1], [41, 1], [46, 2], [46, 3], [50, 1], [50, 3], [51, 3], [47, 2], [47, 3], [11, 1], [48, 1], [49, 1], [43, 4], [43, 3], [42, 1], [44, 3], [44, 6], [44, 3], [44, 6], [45, 5], [62, 3], [62, 3], [63, 2], [63, 3], [63, 5], [58, 3], [58, 3], [13, 1], [4, 0], [4, 2], [5, 0], [5, 2], [38, 1], [38, 1], [38, 1], [38, 1], [38, 1], [38, 1], [38, 1], [38, 1], [38, 1], [38, 1], [52, 1], [52, 1], [61, 1], [61, 1]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:
                    return this.$ = new yy.ast.TaskFile($$[$0 - 2], $$[$0 - 1], this._$);
                    break;
                case 2:
                    this.$ = new yy.ast.ImportStatement($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 3:
                    this.$ = new yy.ast.DefaultMember($$[$0], this._$);
                    break;
                case 4:
                    this.$ = new yy.ast.CompositeMember('* as ' + $$[$0], this._$);
                    break;
                case 5:
                    this.$ = new yy.ast.TaskStatement($$[$0 - 5], $$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 6:case 7:case 10:case 13:
                    this.$ = [$$[$0]];
                    break;
                case 8:case 9:case 11:case 14:
                    this.$ = $$[$0 - 1].concat($$[$0]);
                    break;
                case 12:
                    this.$ = new yy.ast.PropertyAssignment($$[$0 - 2], $$[$0], this._$);
                    break;
                case 15:
                    this.$ = new yy.ast.FunctionExpression($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 16:
                    this.$ = new yy.ast.FunctionExpression($$[$0 - 2], [], this._$);
                    break;
                case 17:
                    this.$ = [$$[$0]];
                    break;
                case 18:case 46:
                    this.$ = $$[$0 - 2].concat($$[$0]);
                    break;
                case 24:
                    this.$ = $$[$0 - 1];
                    break;
                case 25:
                    this.$ = new yy.ast.TernaryExpression($$[$0 - 4], $$[$0 - 2], $$[$0], this._$);
                    break;
                case 26:case 27:
                    this.$ = new yy.ast.BinaryExpression($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
                    break;
                case 28:
                    this.$ = yy.help.convertOperator($$[$0]);
                    break;
                case 29:
                    this.$ = new yy.ast.UnaryExpression($$[$0 - 1], $$[$0], this._$);
                    break;
                case 37:
                    this.$ = new yy.ast.VariableExpression($$[$0], this._$);
                    break;
                case 43:
                    this.$ = new yy.ast.ObjectLiteral([], this._$);
                    break;
                case 44:
                    this.$ = new yy.ast.ObjectLiteral($$[$0 - 1], this._$);
                    break;
                case 45:
                    this.$ = [$$[$0]];
                    break;
                case 47:
                    this.$ = { key: $$[$0 - 2].split('"').join('').split('\'').join(''), value: $$[$0] };
                    break;
                case 48:
                    this.$ = new yy.ast.ArrayLiteral({}, this._$);
                    break;
                case 49:
                    this.$ = new yy.ast.ArrayLiteral($$[$0 - 1], this._$);
                    break;
                case 50:
                    this.$ = new yy.ast.StringLiteral($$[$0], this._$);
                    break;
                case 51:
                    this.$ = new yy.ast.NumberLiteral($$[$0], this._$);
                    break;
                case 52:
                    this.$ = new yy.ast.BooleanLiteral($$[$0], this._$);
                    break;
                case 53:
                    this.$ = new yy.ast.MethodExpression($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 54:
                    this.$ = new yy.ast.MethodExpression($$[$0 - 2], [], this._$);
                    break;
                case 55:
                    this.$ = new yy.ast.PropertyExpression($$[$0], this._$);
                    break;
                case 56:
                    this.$ = new yy.ast.BindExpression($$[$0 - 2], $$[$0], [], this._$);
                    break;
                case 57:
                    this.$ = new yy.ast.BindExpression($$[$0 - 5], $$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 58:
                    this.$ = new yy.ast.BindExpression($$[$0 - 2], $$[$0], [], this._$);
                    break;
                case 59:
                    this.$ = new yy.ast.BindExpression($$[$0 - 5], $$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 60:
                    this.$ = new yy.ast.NewExpression($$[$0 - 3], $$[$0 - 1], this._$);
                    break;
                case 61:
                    this.$ = new yy.ast.FunctionLiteral($$[$0 - 2], $$[$0], this._$);
                    break;
                case 62:
                    this.$ = new yy.ast.FunctionLiteral([$$[$0 - 2]], $$[$0], this._$);
                    break;
                case 63:
                    this.$ = [];
                    break;
                case 64:
                    this.$ = [$$[$0 - 1]];
                    break;
                case 65:
                    this.$ = $$[$0 - 3].concat($$[$0 - 1]);
                    break;
                case 66:case 67:
                    this.$ = $$[$0 - 2] + '.' + $$[$0];
                    break;
                case 68:
                    this.$ = $$[$0];
                    break;
                case 69:case 71:
                    this.$ = [];
                    break;
                case 70:case 72:
                    $$[$0 - 1].push($$[$0]);
                    break;
            }
        },
        table: [o($V0, [2, 69], { 3: 1, 4: 2 }), { 1: [3] }, o($V1, [2, 71], { 5: 3, 7: 4, 8: [1, 5] }), { 6: [1, 6], 16: 7, 17: [1, 8] }, o($V0, [2, 70]), { 9: 9, 13: 10, 14: [1, 11], 66: $V2 }, { 1: [2, 1] }, o($V1, [2, 72]), { 13: 13, 66: $V2 }, { 10: [1, 14] }, { 10: [2, 3] }, { 15: [1, 15] }, o([10, 18, 19, 21, 27, 29, 30, 36, 54, 59, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], [2, 68]), { 18: [1, 16] }, { 11: 17, 55: $V3 }, { 13: 19, 66: $V2 }, { 13: 20, 66: $V2 }, { 12: [1, 21] }, o([12, 18, 21, 29, 30, 36, 54, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], [2, 50]), { 10: [2, 4] }, { 19: [1, 22] }, o($V0, [2, 2]), { 13: 26, 20: 23, 22: 24, 23: 25, 66: $V2 }, { 13: 26, 21: [1, 27], 22: 28, 23: 29, 66: $V2 }, o($V4, [2, 6]), o($V4, [2, 7]), { 18: [1, 30], 27: $V5 }, o($V1, [2, 5]), o($V4, [2, 8]), o($V4, [2, 9]), { 11: 50, 13: 47, 19: $V6, 23: 43, 25: 32, 27: $V7, 31: 33, 32: 34, 33: 35, 34: 36, 35: 37, 39: $V8, 40: 40, 41: 41, 42: 42, 43: 44, 44: 45, 45: 46, 46: 48, 47: 49, 48: 51, 49: 52, 53: $V9, 55: $V3, 56: $Va, 57: $Vb, 58: 53, 60: $Vc, 66: $V2 }, { 11: 50, 13: 47, 19: $V6, 23: 43, 25: 61, 27: $V7, 28: 59, 29: [1, 60], 31: 33, 32: 34, 33: 35, 34: 36, 35: 37, 39: $V8, 40: 40, 41: 41, 42: 42, 43: 44, 44: 45, 45: 46, 46: 48, 47: 49, 48: 51, 49: 52, 53: $V9, 55: $V3, 56: $Va, 57: $Vb, 58: 53, 60: $Vc, 66: $V2 }, o($V4, [2, 12], { 36: $Vd }), o($Ve, [2, 19], { 37: 63, 38: 64, 67: $Vf, 68: $Vg, 69: $Vh, 70: $Vi, 71: $Vj, 72: $Vk, 73: $Vl, 74: $Vm, 75: $Vn, 76: $Vo }), o($Ve, [2, 20]), o($Ve, [2, 21]), o($Ve, [2, 22]), o($Ve, [2, 23], { 38: 64, 37: 75, 67: $Vf, 68: $Vg, 69: $Vh, 70: $Vi, 71: $Vj, 72: $Vk, 73: $Vl, 74: $Vm, 75: $Vn, 76: $Vo }), { 11: 50, 13: 47, 19: $V6, 23: 43, 25: 76, 27: $V7, 31: 33, 32: 34, 33: 35, 34: 36, 35: 37, 39: $V8, 40: 40, 41: 41, 42: 42, 43: 44, 44: 45, 45: 46, 46: 48, 47: 49, 48: 51, 49: 52, 53: $V9, 55: $V3, 56: $Va, 57: $Vb, 58: 53, 60: $Vc, 66: $V2 }, { 11: 50, 13: 47, 19: $V6, 23: 43, 25: 77, 27: $V7, 31: 33, 32: 34, 33: 35, 34: 36, 35: 37, 39: $V8, 40: 40, 41: 41, 42: 42, 43: 44, 44: 45, 45: 46, 46: 48, 47: 49, 48: 51, 49: 52, 53: $V9, 55: $V3, 56: $Va, 57: $Vb, 58: 53, 60: $Vc, 66: $V2 }, o($Vp, [2, 30]), o($Vp, [2, 31]), o($Vp, [2, 32]), o($Vp, [2, 33]), o($Vp, [2, 34]), o($Vp, [2, 35]), o($Vp, [2, 36]), o($Vp, [2, 37], { 27: $V5, 59: [1, 78], 65: $Vq }), o($Vp, [2, 38]), o($Vp, [2, 39]), o($Vp, [2, 40]), o($Vp, [2, 41]), o($Vp, [2, 42]), o($Vp, [2, 55], { 27: [1, 80], 59: [1, 81] }), { 13: 85, 58: 84, 61: 82, 66: $V2, 77: [1, 83] }, { 13: 90, 21: [1, 86], 50: 87, 51: 88, 52: 89, 55: $Vr, 66: $V2 }, { 11: 50, 13: 47, 19: $V6, 23: 43, 25: 61, 27: $V7, 28: 93, 31: 33, 32: 34, 33: 35, 34: 36, 35: 37, 39: $V8, 40: 40, 41: 41, 42: 42, 43: 44, 44: 45, 45: 46, 46: 48, 47: 49, 48: 51, 49: 52, 53: $V9, 54: [1, 92], 55: $V3, 56: $Va, 57: $Vb, 58: 53, 60: $Vc, 66: $V2 }, o($Vp, [2, 51]), o($Vp, [2, 52]), { 29: [1, 94], 30: $Vs }, o($Vp, [2, 16]), o($Vt, [2, 17], { 36: $Vd }), { 11: 50, 13: 47, 19: $V6, 23: 43, 25: 96, 27: $V7, 31: 33, 32: 34, 33: 35, 34: 36, 35: 37, 39: $V8, 40: 40, 41: 41, 42: 42, 43: 44, 44: 45, 45: 46, 46: 48, 47: 49, 48: 51, 49: 52, 53: $V9, 55: $V3, 56: $Va, 57: $Vb, 58: 53, 60: $Vc, 66: $V2 }, { 27: $V7, 31: 97 }, o($Vu, [2, 28]), o($Vu, [2, 73]), o($Vu, [2, 74]), o($Vu, [2, 75]), o($Vu, [2, 76]), o($Vu, [2, 77]), o($Vu, [2, 78]), o($Vu, [2, 79]), o($Vu, [2, 80]), o($Vu, [2, 81]), o($Vu, [2, 82]), { 11: 50, 13: 47, 19: $V6, 23: 43, 35: 98, 40: 40, 41: 41, 42: 42, 43: 44, 44: 45, 45: 46, 46: 48, 47: 49, 48: 51, 49: 52, 53: $V9, 55: $V3, 56: $Va, 57: $Vb, 58: 53, 60: $Vc, 66: $V2 }, { 29: [1, 99], 36: $Vd }, o($Ve, [2, 29]), { 13: 100, 66: $V2 }, { 13: 101, 58: 102, 66: $V2 }, { 11: 50, 13: 47, 19: $V6, 23: 43, 25: 61, 27: $V7, 28: 103, 29: [1, 104], 31: 33, 32: 34, 33: 35, 34: 36, 35: 37, 39: $V8, 40: 40, 41: 41, 42: 42, 43: 44, 44: 45, 45: 46, 46: 48, 47: 49, 48: 51, 49: 52, 53: $V9, 55: $V3, 56: $Va, 57: $Vb, 58: 53, 60: $Vc, 66: $V2 }, { 13: 105, 66: $V2 }, { 27: [1, 106] }, { 27: [2, 85] }, { 27: [2, 86] }, { 65: $Vq }, o($Vp, [2, 43]), { 21: [1, 107], 30: [1, 108] }, o($Vv, [2, 45]), { 18: [1, 109] }, { 18: [2, 83] }, { 18: [2, 84] }, o($Vp, [2, 48]), { 30: $Vs, 54: [1, 110] }, o($Vp, [2, 15]), { 11: 50, 13: 47, 19: $V6, 23: 43, 25: 111, 27: $V7, 31: 33, 32: 34, 33: 35, 34: 36, 35: 37, 39: $V8, 40: 40, 41: 41, 42: 42, 43: 44, 44: 45, 45: 46, 46: 48, 47: 49, 48: 51, 49: 52, 53: $V9, 55: $V3, 56: $Va, 57: $Vb, 58: 53, 60: $Vc, 66: $V2 }, { 18: [1, 112], 36: $Vd }, o($Ve, [2, 27]), o($Ve, [2, 26]), o($Vp, [2, 24]), o($Vp, [2, 56], { 27: [1, 113] }), o($Vw, [2, 66], { 65: $Vq }), o($Vw, [2, 67]), { 29: [1, 114], 30: $Vs }, o($Vp, [2, 54]), o($Vp, [2, 58], { 27: [1, 115] }), { 11: 50, 13: 47, 19: $V6, 23: 43, 25: 61, 27: $V7, 28: 116, 31: 33, 32: 34, 33: 35, 34: 36, 35: 37, 39: $V8, 40: 40, 41: 41, 42: 42, 43: 44, 44: 45, 45: 46, 46: 48, 47: 49, 48: 51, 49: 52, 53: $V9, 55: $V3, 56: $Va, 57: $Vb, 58: 53, 60: $Vc, 66: $V2 }, o($Vp, [2, 44]), { 13: 90, 51: 117, 52: 89, 55: $Vr, 66: $V2 }, { 11: 50, 13: 47, 19: $V6, 23: 43, 25: 118, 27: $V7, 31: 33, 32: 34, 33: 35, 34: 36, 35: 37, 39: $V8, 40: 40, 41: 41, 42: 42, 43: 44, 44: 45, 45: 46, 46: 48, 47: 49, 48: 51, 49: 52, 53: $V9, 55: $V3, 56: $Va, 57: $Vb, 58: 53, 60: $Vc, 66: $V2 }, o($Vp, [2, 49]), o($Vt, [2, 18], { 36: $Vd }), { 11: 50, 13: 47, 19: $V6, 23: 43, 25: 119, 27: $V7, 31: 33, 32: 34, 33: 35, 34: 36, 35: 37, 39: $V8, 40: 40, 41: 41, 42: 42, 43: 44, 44: 45, 45: 46, 46: 48, 47: 49, 48: 51, 49: 52, 53: $V9, 55: $V3, 56: $Va, 57: $Vb, 58: 53, 60: $Vc, 66: $V2 }, { 11: 50, 13: 47, 19: $V6, 23: 43, 25: 61, 27: $V7, 28: 120, 31: 33, 32: 34, 33: 35, 34: 36, 35: 37, 39: $V8, 40: 40, 41: 41, 42: 42, 43: 44, 44: 45, 45: 46, 46: 48, 47: 49, 48: 51, 49: 52, 53: $V9, 55: $V3, 56: $Va, 57: $Vb, 58: 53, 60: $Vc, 66: $V2 }, o($Vp, [2, 53]), { 11: 50, 13: 47, 19: $V6, 23: 43, 25: 61, 27: $V7, 28: 121, 31: 33, 32: 34, 33: 35, 34: 36, 35: 37, 39: $V8, 40: 40, 41: 41, 42: 42, 43: 44, 44: 45, 45: 46, 46: 48, 47: 49, 48: 51, 49: 52, 53: $V9, 55: $V3, 56: $Va, 57: $Vb, 58: 53, 60: $Vc, 66: $V2 }, { 29: [1, 122], 30: $Vs }, o($Vv, [2, 46]), o($Vv, [2, 47], { 36: $Vd }), o([18, 21, 29, 30, 54, 66], [2, 25], { 36: $Vd }), { 29: [1, 123], 30: $Vs }, { 29: [1, 124], 30: $Vs }, o($Vp, [2, 60]), o($Vp, [2, 57]), o($Vp, [2, 59])],
        defaultActions: { 6: [2, 1], 10: [2, 3], 19: [2, 4], 83: [2, 85], 84: [2, 86], 90: [2, 83], 91: [2, 84] },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            } else {
                var _parseError = function _parseError(msg, hash) {
                    this.message = msg;
                    this.hash = hash;
                };

                _parseError.prototype = Error;

                throw new _parseError(str, hash);
            }
        },
        parse: function parse(input) {
            var self = this,
                stack = [0],
                tstack = [],
                vstack = [null],
                lstack = [],
                table = this.table,
                yytext = '',
                yylineno = 0,
                yyleng = 0,
                recovering = 0,
                TERROR = 2,
                EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            _token_stack: var lex = function lex() {
                var token;
                token = lexer.lex() || EOF;
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            };
            var symbol,
                preErrorSymbol,
                state,
                action,
                a,
                r,
                yyval = {},
                p,
                len,
                newState,
                expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                        }
                        r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        } };
    /* generated by jison-lex 0.3.4 */
    var lexer = function () {
        var lexer = {

            EOF: 1,

            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },

            // resets the lexer, sets new input
            setInput: function setInput(input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },

            // consumes and returns one char from the input
            input: function input() {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }

                this._input = this._input.slice(1);
                return ch;
            },

            // unshifts one char (or a string) into the input
            unput: function unput(ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;

                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },

            // When called from action, caches matched text and appends it on next action
            more: function more() {
                this._more = true;
                return this;
            },

            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function reject() {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
                return this;
            },

            // retain first n characters of the match
            less: function less(n) {
                this.unput(this.match.slice(n));
            },

            // displays already matched input, i.e. for error messages
            pastInput: function pastInput() {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },

            // displays upcoming input, i.e. for error messages
            upcomingInput: function upcomingInput() {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },

            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function showPosition() {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },

            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function test_match(match, indexed_rule) {
                var token, lines, backup;

                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }

                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },

            // return next match in input
            next: function next() {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }

                var token, match, tempMatch, index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            } else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            } else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        } else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },

            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                } else {
                    return this.lex();
                }
            },

            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },

            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                } else {
                    return this.conditionStack[0];
                }
            },

            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                } else {
                    return this.conditions["INITIAL"].rules;
                }
            },

            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                } else {
                    return "INITIAL";
                }
            },

            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },

            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: { "flex": true },
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:
                        return;
                        break;
                    case 1:
                        return 8;
                        break;
                    case 2:
                        return 10;
                        break;
                    case 3:
                        return 15;
                        break;
                    case 4:
                        return 17;
                        break;
                    case 5:
                        return 60;
                        break;
                    case 6:
                        return 57;
                        break;
                    case 7:
                        return 56;
                        break;
                    case 8:
                        return 55;
                        break;
                    case 9:
                        this.begin('COMMENT');return;
                        break;
                    case 10:
                        return;
                        break;
                    case 11:
                        this.popState();return;
                        break;
                    case 12:
                        return 64;
                        break;
                    case 13:
                        return 59;
                        break;
                    case 14:
                        return 67;
                        break;
                    case 15:
                        return 69;
                        break;
                    case 16:
                        return 27;
                        break;
                    case 17:
                        return 29;
                        break;
                    case 18:
                        return 53;
                        break;
                    case 19:
                        return 54;
                        break;
                    case 20:
                        return 12;
                        break;
                    case 21:
                        return 18;
                        break;
                    case 22:
                        return 76;
                        break;
                    case 23:
                        return 71;
                        break;
                    case 24:
                        return 72;
                        break;
                    case 25:
                        return 68;
                        break;
                    case 26:
                        return 70;
                        break;
                    case 27:
                        return 73;
                        break;
                    case 28:
                        return 75;
                        break;
                    case 29:
                        return 14;
                        break;
                    case 30:
                        return 74;
                        break;
                    case 31:
                        return 39;
                        break;
                    case 32:
                        return 30;
                        break;
                    case 33:
                        return 36;
                        break;
                    case 34:
                        return 65;
                        break;
                    case 35:
                        return 19;
                        break;
                    case 36:
                        return 21;
                        break;
                    case 37:
                        return 66;
                        break;
                    case 38:
                        return 6;
                        break;
                    case 39:
                        console.log(yy_.yytext);
                        break;
                }
            },
            rules: [/^(?:\s+)/, /^(?:import)/, /^(?:from)/, /^(?:as)/, /^(?:task)/, /^(?:new)/, /^(?:true|false)/, /^(?:(((([-]?([-]?([0]|(([1-9])([0-9]+)*)))\.([0-9]+)*(([eE])([+-]?[0-9]+))?))|((\.([0-9]+)(([eE])([+-]?[0-9]+))?))|((([-]?([0]|(([1-9])([0-9]+)*)))(([eE])([+-]?[0-9]+))?)))|([0][xX]([0-9a-fA-F])+)|([0]([0-7])+)))/, /^(?:((("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*"))|(('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*'))|((`(([^\`\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*`))))/, /^(?:\/\*)/, /^(?:[.\n]+)/, /^(?:\*\/)/, /^(?:=>)/, /^(?:::)/, /^(?:>)/, /^(?:<)/, /^(?:\()/, /^(?:\))/, /^(?:\[)/, /^(?:\])/, /^(?:;)/, /^(?::)/, /^(?:=)/, /^(?:==)/, /^(?:!=)/, /^(?:>=)/, /^(?:<=)/, /^(?:\+)/, /^(?:-)/, /^(?:\*)/, /^(?:\/)/, /^(?:!)/, /^(?:,)/, /^(?:\?)/, /^(?:\.)/, /^(?:\{)/, /^(?:\})/, /^(?:([a-zA-Z$_][a-zA-Z$_0-9-]*))/, /^(?:$)/, /^(?:.)/],
            conditions: { "COMMENT": { "rules": [0, 10, 11, 38], "inclusive": false }, "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], "inclusive": true } }
        };
        return lexer;
    }();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;parser.Parser = Parser;
    return new Parser();
}();

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = Parser;
    exports.Parser = Parser.Parser;
    exports.parse = function () {
        return Parser.parse.apply(Parser, arguments);
    };
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: ' + args[0] + ' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}
//# sourceMappingURL=data:application/json;base64,